import numpy
from PIL import Image
from sklearn.svm import SVC
from sklearn.decomposition import PCA,RandomizedPCA
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import classification_report

img_sample=[]
img_label=[1,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,2,1,1,1,2,2,1,2]
test_sample=[]
test_label=[2,1,1,1,2,2,1,2,1,2,1,1]
#import training set data
for i in range(1,25):
    numofp='s'+str(i)
    img = Image.open('F:/samples/'+numofp+'.jpg')
    img_sample.append(list(img.getdata()))
    # print(img_sample)
    # img_sample = numpy.array(img_sample).reshape(1,3*924160)

#import test set data
for j in range(1,13):
    numoft = 't' + str(j)
    img2 = Image.open('F:/samples/' + numoft + '.jpg')
    test_sample.append(list(img2.getdata()))

img_sample = numpy.array(img_sample).reshape(24,3*52900)
test_sample = numpy.array(test_sample).reshape(12,3*52900)
img_label = numpy.array(img_label)
test_label = numpy.array(test_label)
# print(img_sample.shape)
# print("test_sample: ",test_sample)

n_components=22
pca=PCA(n_components=n_components,whiten=True).fit(img_sample)
img_sample_pca=pca.transform(img_sample)
test_sample_pca=pca.transform(test_sample)

X=numpy.array(img_sample_pca)
TEST=numpy.array(test_sample_pca)
y=numpy.array(img_label)
print(X)
# print(TEST)

param_grid = {'C': [5e3, 1e4, 5e4, 1e5, 10e5]}
clf=GridSearchCV(SVC(kernel='rbf',class_weight='balanced'),param_grid)
clf.fit(X,y)
pre=clf.predict(TEST)
print(clf.best_estimator_)
print(pre)
print(classification_report(y_pred=pre,y_true=test_label))
